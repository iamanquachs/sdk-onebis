"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionAssertReturnProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var AssertProgrammer_1 = require("../AssertProgrammer");
var FunctionalAssertFunctionProgrammer_1 = require("./FunctionalAssertFunctionProgrammer");
var FunctionalGeneralProgrammer_1 = require("./internal/FunctionalGeneralProgrammer");
var FunctionAssertReturnProgrammer;
(function (FunctionAssertReturnProgrammer) {
    FunctionAssertReturnProgrammer.write = function (project) {
        return function (modulo) {
            return function (equals) {
                return function (expression, declaration, init) {
                    var wrapper = FunctionalAssertFunctionProgrammer_1.FunctionalAssertFunctionProgrammer.errorFactoryWrapper(modulo)(declaration.parameters)(init);
                    var _a = FunctionAssertReturnProgrammer.returnStatement(project)(modulo)(equals)(expression, declaration, wrapper.name), async = _a.async, statement = _a.returns;
                    return typescript_1.default.factory.createArrowFunction(async
                        ? [typescript_1.default.factory.createModifier(typescript_1.default.SyntaxKind.AsyncKeyword)]
                        : undefined, undefined, declaration.parameters, declaration.type, undefined, typescript_1.default.factory.createBlock([wrapper.variable, statement], true));
                };
            };
        };
    };
    FunctionAssertReturnProgrammer.returnStatement = function (project) {
        return function (modulo) {
            return function (equals) {
                return function (expression, declaration, wrapper) {
                    var _a = FunctionalGeneralProgrammer_1.FunctionalGeneralProgrammer.getReturnType(project.checker)(declaration), type = _a.type, async = _a.async;
                    var caller = typescript_1.default.factory.createCallExpression(expression, undefined, declaration.parameters.map(function (p) {
                        return typescript_1.default.factory.createIdentifier(p.name.getText());
                    }));
                    return {
                        async: async,
                        returns: typescript_1.default.factory.createReturnStatement(typescript_1.default.factory.createCallExpression(AssertProgrammer_1.AssertProgrammer.write(project)(modulo)(equals)(type, undefined, FunctionalAssertFunctionProgrammer_1.FunctionalAssertFunctionProgrammer.hookPath({
                            wrapper: wrapper,
                            replacer: "$input.return",
                        })), undefined, [async ? typescript_1.default.factory.createAwaitExpression(caller) : caller])),
                    };
                };
            };
        };
    };
})(FunctionAssertReturnProgrammer || (exports.FunctionAssertReturnProgrammer = FunctionAssertReturnProgrammer = {}));
//# sourceMappingURL=FunctionalAssertReturnProgrammer.js.map