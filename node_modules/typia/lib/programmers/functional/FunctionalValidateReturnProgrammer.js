"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionalValidateReturnProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var StatementFactory_1 = require("../../factories/StatementFactory");
var StringUtil_1 = require("../../utils/StringUtil");
var ValidateProgrammer_1 = require("../ValidateProgrammer");
var FunctionalValidateFunctionProgrammer_1 = require("./FunctionalValidateFunctionProgrammer");
var FunctionalGeneralProgrammer_1 = require("./internal/FunctionalGeneralProgrammer");
var FunctionalValidateReturnProgrammer;
(function (FunctionalValidateReturnProgrammer) {
    FunctionalValidateReturnProgrammer.write = function (project) {
        return function (modulo) {
            return function (equals) {
                return function (expression, declaration) {
                    var _a = FunctionalValidateReturnProgrammer.writeStatements(project)(modulo)(equals)(expression, declaration), async = _a.async, statements = _a.statements;
                    return typescript_1.default.factory.createArrowFunction(async
                        ? [typescript_1.default.factory.createModifier(typescript_1.default.SyntaxKind.AsyncKeyword)]
                        : undefined, undefined, declaration.parameters, FunctionalValidateFunctionProgrammer_1.FunctionalValidateFunctionProgrammer.getReturnTypeNode(declaration, async), undefined, typescript_1.default.factory.createBlock(statements, true));
                };
            };
        };
    };
    FunctionalValidateReturnProgrammer.writeStatements = function (project) {
        return function (modulo) {
            return function (equals) {
                return function (expression, declaration) {
                    var _a = FunctionalGeneralProgrammer_1.FunctionalGeneralProgrammer.getReturnType(project.checker)(declaration), type = _a.type, async = _a.async;
                    var caller = typescript_1.default.factory.createCallExpression(expression, undefined, declaration.parameters.map(function (p) {
                        return typescript_1.default.factory.createIdentifier(p.name.getText());
                    }));
                    var name = StringUtil_1.StringUtil.escapeDuplicate(declaration.parameters.map(function (p) { return p.name.getText(); }))("result");
                    var statements = [
                        StatementFactory_1.StatementFactory.constant(name, typescript_1.default.factory.createCallExpression(ValidateProgrammer_1.ValidateProgrammer.write(project)(modulo)(equals)(type), undefined, [async ? typescript_1.default.factory.createAwaitExpression(caller) : caller])),
                        typescript_1.default.factory.createIfStatement(typescript_1.default.factory.createPrefixUnaryExpression(typescript_1.default.SyntaxKind.ExclamationToken, typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createIdentifier(name), typescript_1.default.factory.createIdentifier("success"))), typescript_1.default.factory.createExpressionStatement(typescript_1.default.factory.createBinaryExpression(typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createIdentifier(name), typescript_1.default.factory.createIdentifier("errors")), typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.EqualsToken), FunctionalValidateFunctionProgrammer_1.FunctionalValidateFunctionProgrammer.hookErrors({
                            expression: typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createIdentifier(name), typescript_1.default.factory.createIdentifier("errors")),
                            replacer: typescript_1.default.factory.createStringLiteral("$input.return"),
                        })))),
                        typescript_1.default.factory.createReturnStatement(typescript_1.default.factory.createIdentifier("result")),
                    ];
                    return {
                        async: async,
                        statements: statements,
                    };
                };
            };
        };
    };
})(FunctionalValidateReturnProgrammer || (exports.FunctionalValidateReturnProgrammer = FunctionalValidateReturnProgrammer = {}));
//# sourceMappingURL=FunctionalValidateReturnProgrammer.js.map