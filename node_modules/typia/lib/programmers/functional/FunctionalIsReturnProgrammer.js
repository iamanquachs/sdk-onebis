"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionalIsReturnProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var StatementFactory_1 = require("../../factories/StatementFactory");
var StringUtil_1 = require("../../utils/StringUtil");
var IsProgrammer_1 = require("../IsProgrammer");
var FunctionalIsFunctionProgrammer_1 = require("./FunctionalIsFunctionProgrammer");
var FunctionalGeneralProgrammer_1 = require("./internal/FunctionalGeneralProgrammer");
var FunctionalIsReturnProgrammer;
(function (FunctionalIsReturnProgrammer) {
    FunctionalIsReturnProgrammer.write = function (project) {
        return function (modulo) {
            return function (equals) {
                return function (expression, declaration) {
                    var _a = FunctionalIsReturnProgrammer.writeStatements(project)(modulo)(equals)(expression, declaration), async = _a.async, statements = _a.statements;
                    return typescript_1.default.factory.createArrowFunction(async
                        ? [typescript_1.default.factory.createModifier(typescript_1.default.SyntaxKind.AsyncKeyword)]
                        : undefined, undefined, declaration.parameters, FunctionalIsFunctionProgrammer_1.FunctionalIsFunctionProgrammer.getReturnTypeNode(declaration, async), undefined, typescript_1.default.factory.createBlock(statements, true));
                };
            };
        };
    };
    FunctionalIsReturnProgrammer.writeStatements = function (project) {
        return function (modulo) {
            return function (equals) {
                return function (expression, declaration) {
                    var _a = FunctionalGeneralProgrammer_1.FunctionalGeneralProgrammer.getReturnType(project.checker)(declaration), type = _a.type, async = _a.async;
                    var caller = typescript_1.default.factory.createCallExpression(expression, undefined, declaration.parameters.map(function (p) {
                        return typescript_1.default.factory.createIdentifier(p.name.getText());
                    }));
                    var name = StringUtil_1.StringUtil.escapeDuplicate(declaration.parameters.map(function (p) { return p.name.getText(); }))("result");
                    var statements = [
                        StatementFactory_1.StatementFactory.constant(name, async ? typescript_1.default.factory.createAwaitExpression(caller) : caller),
                        typescript_1.default.factory.createReturnStatement(typescript_1.default.factory.createConditionalExpression(typescript_1.default.factory.createCallExpression(IsProgrammer_1.IsProgrammer.write(project)(modulo)(equals)(type), undefined, [typescript_1.default.factory.createIdentifier(name)]), undefined, typescript_1.default.factory.createIdentifier(name), undefined, typescript_1.default.factory.createNull())),
                    ];
                    return { async: async, statements: statements };
                };
            };
        };
    };
})(FunctionalIsReturnProgrammer || (exports.FunctionalIsReturnProgrammer = FunctionalIsReturnProgrammer = {}));
//# sourceMappingURL=FunctionalIsReturnProgrammer.js.map