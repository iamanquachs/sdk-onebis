var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
export * as username from "./username";
export * as email from "./email";
export * as status from "./status";
/**
 * @controller UserController.create
 * @path POST /users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function create(connection, createUserDto) {
    return __awaiter(this, void 0, void 0, function* () {
        return PlainFetcher.fetch(Object.assign(Object.assign({}, connection), { headers: Object.assign(Object.assign({}, connection.headers), { "Content-Type": "application/json" }) }), Object.assign(Object.assign({}, create.METADATA), { template: create.METADATA.path, path: create.path() }), createUserDto);
    });
}
(function (create) {
    create.METADATA = {
        method: "POST",
        path: "/users",
        request: {
            type: "application/json",
            encrypted: false,
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: 201,
    };
    create.path = () => "/users";
})(create || (create = {}));
/**
 * @controller UserController.findAll
 * @path GET /users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function findAll(connection, query) {
    return __awaiter(this, void 0, void 0, function* () {
        return PlainFetcher.fetch(connection, Object.assign(Object.assign({}, findAll.METADATA), { template: findAll.METADATA.path, path: findAll.path(query) }));
    });
}
(function (findAll) {
    findAll.METADATA = {
        method: "GET",
        path: "/users",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: 200,
    };
    findAll.path = (query) => {
        const variables = new URLSearchParams();
        for (const [key, value] of Object.entries(query))
            if (undefined === value)
                continue;
            else if (Array.isArray(value))
                value.forEach((elem) => variables.append(key, String(elem)));
            else
                variables.set(key, String(value));
        const location = "/users";
        return 0 === variables.size
            ? location
            : `${location}?${variables.toString()}`;
    };
})(findAll || (findAll = {}));
/**
 * @controller UserController.findOne
 * @path GET /users/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function findOne(connection, id) {
    return __awaiter(this, void 0, void 0, function* () {
        return PlainFetcher.fetch(connection, Object.assign(Object.assign({}, findOne.METADATA), { template: findOne.METADATA.path, path: findOne.path(id) }));
    });
}
(function (findOne) {
    findOne.METADATA = {
        method: "GET",
        path: "/users/:id",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: 200,
    };
    findOne.path = (id) => { var _a; return `/users/${encodeURIComponent((_a = id === null || id === void 0 ? void 0 : id.toString()) !== null && _a !== void 0 ? _a : "null")}`; };
})(findOne || (findOne = {}));
/**
 * @controller UserController.update
 * @path PATCH /users/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function update(connection, id, updateUserDto) {
    return __awaiter(this, void 0, void 0, function* () {
        return PlainFetcher.fetch(Object.assign(Object.assign({}, connection), { headers: Object.assign(Object.assign({}, connection.headers), { "Content-Type": "application/json" }) }), Object.assign(Object.assign({}, update.METADATA), { template: update.METADATA.path, path: update.path(id) }), updateUserDto);
    });
}
(function (update) {
    update.METADATA = {
        method: "PATCH",
        path: "/users/:id",
        request: {
            type: "application/json",
            encrypted: false,
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: 200,
    };
    update.path = (id) => { var _a; return `/users/${encodeURIComponent((_a = id === null || id === void 0 ? void 0 : id.toString()) !== null && _a !== void 0 ? _a : "null")}`; };
})(update || (update = {}));
/**
 * @controller UserController.remove
 * @path DELETE /users/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function remove(connection, id) {
    return __awaiter(this, void 0, void 0, function* () {
        return PlainFetcher.fetch(connection, Object.assign(Object.assign({}, remove.METADATA), { template: remove.METADATA.path, path: remove.path(id) }));
    });
}
(function (remove) {
    remove.METADATA = {
        method: "DELETE",
        path: "/users/:id",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: 204,
    };
    remove.path = (id) => { var _a; return `/users/${encodeURIComponent((_a = id === null || id === void 0 ? void 0 : id.toString()) !== null && _a !== void 0 ? _a : "null")}`; };
})(remove || (remove = {}));
