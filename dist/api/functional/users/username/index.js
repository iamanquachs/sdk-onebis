var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
/**
 * @controller UserController.findByUsername
 * @path GET /users/username/:username
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function findByUsername(connection, username) {
    return __awaiter(this, void 0, void 0, function* () {
        return PlainFetcher.fetch(connection, Object.assign(Object.assign({}, findByUsername.METADATA), { template: findByUsername.METADATA.path, path: findByUsername.path(username) }));
    });
}
(function (findByUsername) {
    findByUsername.METADATA = {
        method: "GET",
        path: "/users/username/:username",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: 200,
    };
    findByUsername.path = (username) => { var _a; return `/users/username/${encodeURIComponent((_a = username === null || username === void 0 ? void 0 : username.toString()) !== null && _a !== void 0 ? _a : "null")}`; };
})(findByUsername || (findByUsername = {}));
