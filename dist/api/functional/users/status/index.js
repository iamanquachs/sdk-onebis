var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
/**
 * @controller UserController.changeStatus
 * @path PATCH /users/:id/status
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function changeStatus(connection, id, changeStatusDto) {
    return __awaiter(this, void 0, void 0, function* () {
        return PlainFetcher.fetch(Object.assign(Object.assign({}, connection), { headers: Object.assign(Object.assign({}, connection.headers), { "Content-Type": "application/json" }) }), Object.assign(Object.assign({}, changeStatus.METADATA), { template: changeStatus.METADATA.path, path: changeStatus.path(id) }), changeStatusDto);
    });
}
(function (changeStatus) {
    changeStatus.METADATA = {
        method: "PATCH",
        path: "/users/:id/status",
        request: {
            type: "application/json",
            encrypted: false,
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: 200,
    };
    changeStatus.path = (id) => { var _a; return `/users/${encodeURIComponent((_a = id === null || id === void 0 ? void 0 : id.toString()) !== null && _a !== void 0 ? _a : "null")}/status`; };
})(changeStatus || (changeStatus = {}));
