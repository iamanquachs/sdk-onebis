/**
 * @packageDocumentation
 * @module api.functional.users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
import type { IConnection } from "@nestia/fetcher";
import type { Primitive, Resolved } from "typia";
import type { CreateUserDto, UserResponseDto, UserQueryDto, UpdateUserDto } from "../../../models/dtos/user.dto";
import type { UsersListResponse } from "../../../modules/users/user.controller";
export * as username from "./username";
export * as email from "./email";
export * as status from "./status";
/**
 * @controller UserController.create
 * @path POST /users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function create(connection: IConnection, createUserDto: create.Body): Promise<create.Output>;
export declare namespace create {
    type Body = Primitive<CreateUserDto>;
    type Output = Primitive<UserResponseDto>;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/users";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 201;
    };
    const path: () => string;
}
/**
 * @controller UserController.findAll
 * @path GET /users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function findAll(connection: IConnection, query: findAll.Query): Promise<findAll.Output>;
export declare namespace findAll {
    type Query = Resolved<UserQueryDto>;
    type Output = Primitive<UsersListResponse>;
    const METADATA: {
        readonly method: "GET";
        readonly path: "/users";
        readonly request: null;
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 200;
    };
    const path: (query: Query) => string;
}
/**
 * @controller UserController.findOne
 * @path GET /users/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function findOne(connection: IConnection, id: number): Promise<findOne.Output>;
export declare namespace findOne {
    type Output = Primitive<UserResponseDto>;
    const METADATA: {
        readonly method: "GET";
        readonly path: "/users/:id";
        readonly request: null;
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 200;
    };
    const path: (id: number) => string;
}
/**
 * @controller UserController.update
 * @path PATCH /users/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function update(connection: IConnection, id: number, updateUserDto: update.Body): Promise<update.Output>;
export declare namespace update {
    type Body = Primitive<UpdateUserDto>;
    type Output = Primitive<UserResponseDto>;
    const METADATA: {
        readonly method: "PATCH";
        readonly path: "/users/:id";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 200;
    };
    const path: (id: number) => string;
}
/**
 * @controller UserController.remove
 * @path DELETE /users/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function remove(connection: IConnection, id: number): Promise<void>;
export declare namespace remove {
    const METADATA: {
        readonly method: "DELETE";
        readonly path: "/users/:id";
        readonly request: null;
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 204;
    };
    const path: (id: number) => string;
}
